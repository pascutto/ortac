File "hashtbl.mli", line 19, characters 25-35:
19 | val copy : ('a, 'b) t -> ('a, 'b) t
                              ^^^^^^^^^^
Warning: Skipping `copy': functions returning a SUT value cannot be tested.
File "hashtbl.mli", line 63, characters 12-28:
63 | val iter : ('a -> 'b -> unit) -> ('a, 'b) t -> unit
                 ^^^^^^^^^^^^^^^^
Warning: Skipping function with argument of type `'a -> 'b -> unit':
         functions are not supported yet as arguments.
File "hashtbl.mli", line 64, characters 26-47:
64 | val filter_map_inplace : ('a -> 'b -> 'b option) -> ('a, 'b) t -> unit
                               ^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping function with argument of type `'a -> 'b -> 'b option':
         functions are not supported yet as arguments.
File "hashtbl.mli", line 73, characters 12-32:
73 | val fold : ('a -> 'b -> 'c -> 'c) -> ('a, 'b) t -> 'c -> 'c
                 ^^^^^^^^^^^^^^^^^^^^
Warning: Skipping function with argument of type `'a -> 'b -> 'c -> 'c':
         functions are not supported yet as arguments.
File "hashtbl.mli", line 78, characters 16-28:
78 | val randomize : unit -> unit
                     ^^^^^^^^^^^^
Warning: Skipping `randomize': functions with no SUT argument cannot be
         tested.
File "hashtbl.mli", line 78, characters 0-28:
78 | val randomize : unit -> unit
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping `randomize': functions without specification cannot be
         tested.
File "hashtbl.mli", line 79, characters 20-32:
79 | val is_randomized : unit -> bool
                         ^^^^^^^^^^^^
Warning: Skipping `is_randomized': functions with no SUT argument cannot be
         tested.
File "hashtbl.mli", line 79, characters 0-32:
79 | val is_randomized : unit -> bool
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping `is_randomized': functions without specification cannot be
         tested.
File "hashtbl.mli", line 82, characters 68-78:
82 |   ?random:(* thwart tools/sync_stdlib_docs *) bool -> ('a, 'b) t -> ('a, 'b) t
                                                                         ^^^^^^^^^^
Warning: Skipping `rebuild': functions returning a SUT value cannot be
         tested.
File "hashtbl.mli", line 81, characters 0-92:
81 | val rebuild :
82 |   ?random:(* thwart tools/sync_stdlib_docs *) bool -> ('a, 'b) t -> ('a, 'b) t
Warning: Skipping `rebuild': functions without specification cannot be
         tested.
File "hashtbl.mli", line 96, characters 0-36:
96 | val stats : ('a, 'b) t -> statistics
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping `stats': functions without specification cannot be tested.
File "hashtbl.mli", line 97, characters 0-42:
97 | val to_seq : ('a, 'b) t -> ('a * 'b) Seq.t
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping `to_seq': functions without specification cannot be tested.
File "hashtbl.mli", line 98, characters 0-39:
98 | val to_seq_keys : ('a, _) t -> 'a Seq.t
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping `to_seq_keys': functions without specification cannot be
         tested.
File "hashtbl.mli", line 99, characters 0-41:
99 | val to_seq_values : (_, 'b) t -> 'b Seq.t
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping `to_seq_values': functions without specification cannot be
         tested.
File "hashtbl.mli", line 100, characters 0-51:
100 | val add_seq : ('a, 'b) t -> ('a * 'b) Seq.t -> unit
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping `add_seq': functions without specification cannot be
         tested.
File "hashtbl.mli", line 101, characters 0-55:
101 | val replace_seq : ('a, 'b) t -> ('a * 'b) Seq.t -> unit
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping `replace_seq': functions without specification cannot be
         tested.
File "hashtbl.mli", line 102, characters 32-42:
102 | val of_seq : ('a * 'b) Seq.t -> ('a, 'b) t
                                      ^^^^^^^^^^
Warning: Skipping `of_seq': functions returning a SUT value cannot be tested.
File "hashtbl.mli", line 102, characters 0-42:
102 | val of_seq : ('a * 'b) Seq.t -> ('a, 'b) t
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping `of_seq': functions without specification cannot be tested.
File "hashtbl.mli", line 103, characters 11-20:
103 | val hash : 'a -> int
                 ^^^^^^^^^
Warning: Skipping `hash': functions with no SUT argument cannot be tested.
File "hashtbl.mli", line 103, characters 0-20:
103 | val hash : 'a -> int
      ^^^^^^^^^^^^^^^^^^^^
Warning: Skipping `hash': functions without specification cannot be tested.
File "hashtbl.mli", line 104, characters 18-34:
104 | val seeded_hash : int -> 'a -> int
                        ^^^^^^^^^^^^^^^^
Warning: Skipping `seeded_hash': functions with no SUT argument cannot be
         tested.
File "hashtbl.mli", line 104, characters 0-34:
104 | val seeded_hash : int -> 'a -> int
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping `seeded_hash': functions without specification cannot be
         tested.
File "hashtbl.mli", line 105, characters 17-40:
105 | val hash_param : int -> int -> 'a -> int
                       ^^^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping `hash_param': functions with no SUT argument cannot be
         tested.
File "hashtbl.mli", line 105, characters 0-40:
105 | val hash_param : int -> int -> 'a -> int
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping `hash_param': functions without specification cannot be
         tested.
File "hashtbl.mli", line 106, characters 24-54:
106 | val seeded_hash_param : int -> int -> int -> 'a -> int
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping `seeded_hash_param': functions with no SUT argument cannot
         be tested.
File "hashtbl.mli", line 106, characters 0-54:
106 | val seeded_hash_param : int -> int -> int -> 'a -> int
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping `seeded_hash_param': functions without specification cannot
         be tested.
File "hashtbl.mli", line 30, characters 24-66:
30 |     raises Not_found -> forall x. not (List.mem (a, x) h.contents)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning: Skipping clause: unsupported quantification.
